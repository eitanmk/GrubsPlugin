package com.selfequalsthis.grubsplugin.module.teleport;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Properties;

import org.spongepowered.api.Game;

import com.selfequalsthis.grubsplugin.GrubsPlugin;
import com.selfequalsthis.grubsplugin.module.AbstractGrubsModule;

public class TeleportModule extends AbstractGrubsModule {

	public final static String SEPARATOR = "|||";

	public HashMap<String,String> playerSpecialLocations = new HashMap<String,String>();
	public HashMap<String,TeleportModuleLocation> teleportPresets = new HashMap<String,TeleportModuleLocation>();
	private Properties teleportProperties = new Properties();

	//private TeleportEventListeners eventListeners;

	public TeleportModule(GrubsPlugin plugin, Game game) {
		this.pluginRef = plugin;
		this.game = game;
		this.logger = plugin.getLogger();
		this.logPrefix = "[TeleportModule]: ";
		this.dataFileName = "teleports.dat";

		this.commandHandlers = new TeleportModuleCommandHandlers(this, this.game);
		//this.eventListeners = new TeleportEventListeners(this);

		this.playerSpecialLocations.put("last", "No previous location found.");
		this.playerSpecialLocations.put("quit", "No previous quit location found.");
		this.playerSpecialLocations.put("grave", "No previous death location found.");
	}

	@Override
	public void enable() {
		this.registerCommands(this.commandHandlers);
		//this.registerEventHandlers(this.eventListeners);

		File dataFile = this.getDataFile();
		if (dataFile != null) {
			this.log("Loading Teleport presets.");
			loadTeleportPresets();
			this.log("Loaded " + teleportPresets.size() + " presets.");
		}

	}

	@Override
	public void disable() {
		this.log("Saving Teleport presets.");
		saveTeleportPresets();

		this.unregisterCommands(this.commandHandlers);
		//this.unregisterEventHandlers(this.eventListeners);
	}

	private void loadTeleportPresets() {
		File dataFile = this.getDataFile();
		if (dataFile == null) {
			this.log("Error with data file. Nothing can be loaded!");
			return;
		}

		try {
			FileInputStream in = new FileInputStream(dataFile);
			teleportProperties.load(in);
			in.close();

			for (Object key : teleportProperties.keySet()) {
				String realKey = (String) key;
				String rawValue = teleportProperties.getProperty(realKey);

				TeleportModuleLocation loc = new TeleportModuleLocation(this, this.game);
				if (loc.fromPropValue(rawValue)) {
					teleportPresets.put(realKey, loc);
				}
			}
		}
		catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	public void saveTeleportPresets() {
		File dataFile = this.getDataFile();
		if (dataFile == null) {
			this.log("Error with data file. Nothing will be saved!");
			return;
		}

		// empty the teleport properties file
		teleportProperties.clear();

		for (String s : teleportPresets.keySet()) {
			TeleportModuleLocation loc = teleportPresets.get(s);
			teleportProperties.put(s, loc.toPropValue());
		}

		this.log("Writing Teleport presets file.");
		try {
			FileOutputStream out = new FileOutputStream(dataFile);
			teleportProperties.store(out, "Do NOT edit this file manually!");
			out.flush();
			out.close();
		}
		catch (IOException ex) {
			this.log("Error writing Teleport presets file!");
			ex.printStackTrace();
		}
	}

	/*
	private String getPlayerSpecialLocationKey(String name, String type) {
		if (this.playerSpecialLocations.containsKey(type)) {
			return name + TeleportModule.SEPARATOR + type;
		}

		this.logger.info("Invalid special location type: " + type);
		return "";
	}

	public void savePlayerSpecialLocation(Player player, String type) {
		this.teleportPresets.put(this.getPlayerSpecialLocationKey(player.getName(), type), player.getLocation());
	}

	public Location getPlayerSpecialLocation(OfflinePlayer player, String type) {
		String key = this.getPlayerSpecialLocationKey(player.getName(), type);
		if (this.teleportPresets.containsKey(key)) {
			return this.teleportPresets.get(key);
		}

		return null;
	}

	public void teleportPlayer(Player player, Location location) {
		// always save last location
		this.savePlayerSpecialLocation(player, "last");
		player.teleport(location, TeleportCause.PLUGIN);
	}
	 */

}
